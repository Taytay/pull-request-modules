{"name":"redux-query-patch","version":"1.3.0","description":"A library for querying and managing network state in React/Redux applications, patched to have recent pull requests","main":"dist/commonjs/index.js","module":"dist/es/index.js","jsnext:main":"dist/es/index.js","scripts":{"build:commonjs":"npm run clean:commonjs && cross-env NODE_ENV=production cross-env BABEL_ENV=commonjs babel src --out-dir dist/commonjs --ignore examples/,test/","build:es":"npm run clean:es && cross-env NODE_ENV=production cross-env BABEL_ENV=es babel src --out-dir dist/es --ignore examples/,test/","build:umd":"npm run clean:umd && cross-env NODE_ENV=production webpack --config webpack.config.js --bail","build":"npm run build:commonjs && npm run build:es && npm run build:umd","clean:commonjs":"rimraf dist/commonjs","clean:coverage":"rimraf coverage","clean:es":"rimraf dist/es","clean:umd":"rimraf dist/umd","clean":"npm run clean:commonjs && npm run clean:es && npm run clean:umd","coverage":"nyc report --reporter=text-lcov > coverage.lcov && codecov","prepublish":"npm run lint && npm run test && npm run build","lint":"eslint src test","test:cov":"cross-env NODE_ENV=test nyc npm test","test":"mocha --compilers js:babel-core/register --reporter spec test/**/*.test.js"},"repository":"https://github.com/amplitude/redux-query","keywords":["redux","react","query","fetch","REST"],"license":"MIT","dependencies":{"backo":"^1.1.0","invariant":"^2.2.0","json-stable-stringify":"^1.0.0","lodash.difference":"^4.5.0","lodash.get":"^4.4.2","lodash.identity":"^3.0.0","lodash.includes":"^4.3.0","lodash.intersection":"^4.4.0","lodash.omit":"^4.5.0","lodash.partial":"^4.2.1","lodash.pickby":"^4.6.0","lodash.values":"^4.3.0","react":"^15.0.1","react-addons-shallow-compare":"^15.4.2","superagent":"^1.6.1"},"peerDependencies":{"react":"^0.14.0 || ^15.0.0-0","redux":"^2.0.0 || ^3.0.0"},"devDependencies":{"babel-cli":"6.8.0","babel-core":"^6.5.1","babel-eslint":"^7.1.1","babel-loader":"^6.2.0","babel-preset-es2015":"^6.6.0","babel-preset-react":"^6.5.0","babel-preset-stage-2":"^6.22.0","chai":"^3.5.0","codecov":"^1.0.1","cross-env":"^1.0.7","eslint":"^3.3.1","eslint-plugin-import":"^2.2.0","eslint-plugin-react":"^6.1.1","mocha":"^2.4.5","nyc":"^10.0.0","rimraf":"^2.4.3","superagent-mock":"^1.10.0","webpack":"^1.9.6"},"gitHead":"23ab5de08edf160e73df0a862f0d6df2d7826d4e","homepage":"https://github.com/amplitude/redux-query#readme","versions":[{"number":"1.3.0","date":"2017-03-27T17:26:12.352Z"}],"readme":"# redux-query\n\n[![Travis](https://img.shields.io/travis/amplitude/redux-query.svg?style=flat-square)](https://travis-ci.org/amplitude/redux-query)\n[![npm](https://img.shields.io/npm/v/redux-query.svg?style=flat-square)](https://www.npmjs.com/package/redux-query)\n[![Codecov](https://img.shields.io/codecov/c/github/amplitude/redux-query.svg?style=flat-square)](https://codecov.io/gh/amplitude/redux-query)\n\n`redux-query` is a library for querying and managing network state in React/Redux applications.\n\nWith `redux-query` you can:\n\n- Declare your network dependencies right next to your React components. Data is requested automatically when components mount. When components update and unmount, in-flight requests are automatically cancelled.\n- Trigger server-side changes (mutations) by dispatching regular Redux actions.\n- Have a consistent, minimal-boilerplate interface for all network-related state.\n- Transform and normalize data to avoid duplicate state.\n- Perform optimistic updates.\n- Use with other Redux middleware libraries like [redux-thunk](https://github.com/gaearon/redux-thunk) and [redux-saga](https://github.com/redux-saga/redux-saga).\n- Debug network state and actions with Redux dev tools like [redux-logger](https://github.com/evgenyrodionov/redux-logger).\n\n## Getting Started\n\nInstall `redux-query` via npm:\n\n```\n$ npm install --save redux-query\n```\n\nAdd the `entitiesReducer` and `queriesReducer` to your combined reducer.\n\nInclude the `queryMiddleware` in your store's `applyMiddleware` call. `queryMiddleware` requires two arguments: a selector (or function) that returns entities state, and a function for the queries state.\n\nFor example:\n\n```javascript\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { entitiesReducer, queriesReducer, queryMiddleware } from 'redux-query';\nimport createLogger from 'redux-logger';\n\nexport const getQueries = (state) => state.queries;\nexport const getEntities = (state) => state.entities;\n\nconst reducer = combineReducers({\n    entities: entitiesReducer,\n    queries: queriesReducer,\n});\n\nconst logger = createLogger();\nconst store = createStore(\n    reducer,\n    applyMiddleware(queryMiddleware(getQueries, getEntities), logger)\n);\n```\n\n## Dependencies\n\nAll dependencies are listed in [`package.json`](./package.json). Redux and React are peer dependencies. HTTP requests are made using [superagent](https://github.com/visionmedia/superagent).\n\n## Usage and API\n\n### Requests and mutations\n\nThere are two types of queries with `redux-query`: \"requests\" and \"mutations\". Requests are for reading values from HTTP endpoints. Mutations are for HTTP endpoints that change network state â€“ the \"C\", \"U\", and \"D\" in \"CRUD\".\n\nRequests can be triggered from the `connectRequest` higher-order component or a `requestAsync` action. Mutations are triggered by dispatching a `mutateAsync` action.\n\nBy default, requests are GETs and mutations are POSTS.\n\n### Query configs\n\nQuery configs are objects used to describe how redux-query should handle the request or mutation. Query config options differ slightly between requests and mutations\n\n#### Request query config options\n\n| Name | Type | Required? | Description |\n|:---|:---|:---:|:---|\n| `url` | string | yes | The URL for the HTTP request. |\n| `transform` | function |  | Function that transforms the response data to an entities object where keys are entity IDs and values are entity data. Can be used to normalize data. |\n| `update` | object | yes | Object where keys are entity IDs and values are update functions. |\n| `body` | object |  | The request body. |\n| `force` | boolean |  | Perform the request even if we've already successfully requested it. |\n| `queryKey` | string |  | The identifier used to identify the query metadata in the `queries` reducer. If unprovided, the `url` and `body` fields are serialized to generate the query key. |\n| `meta` | object |  | Various metadata for the query. Can be used to update other reducers when queries succeed or fail. |\n| `options` | object |  | Options for the request. Set `options.method` to change the HTTP method, `options.headers` to set any headers and `options.credentials = 'include'` for CORS. |\n\n#### Mutation query config options\n\n| Name | Type | Required? | Description |\n|:---|:---|:---:|:---|\n| `url` | string | yes | The URL for the HTTP request. |\n| `transform` | function |  | Function that transforms the response data to an entities object where keys are entity IDs and values are entity data. Can be used to normalize data. |\n| `update` | object | yes | Object where keys are entity IDs and values are update functions. |\n| `optimisticUpdate` | object |  | Object where keys are entity IDs and values are functions that provide the current entity value. The return values are used to update the `entities` store until the mutation finishes. |\n| `body` | object |  | The HTTP request body. |\n| `queryKey` | string |  | The identifier used to identify the query metadata in the `queries` reducer. If unprovided, the `url` and `body` fields are serialized to generate the query key. |\n| `options` | object |  | Options for the request. Set `options.method` to change the HTTP method, `options.headers` to set any headers and `options.credentials = 'include'` for CORS. |\n\n### `transform` functions\n\n`transform` functions let you process and normalize response data before it is passed to the `update` step. They have the following signature:\n\n```javascript\n(responseJson: ?Object, responseText: string) => { [key: string]: any }\n```\n\nIf your data is normalized on the server, you may not need to use this function.\n\n### `update` functions\n\n`update` functions are responsible for reconciling response data with the existing `entities` reducer data for the given entity ID. They have the following signature:\n\n```javascript\n(prevValue: any, transformedValue: any) => any\n```\n\nThe `prevValue` is the whatever value is selected from the `entities` reducer for the respective entity ID. The returned value from this function will become the new value for the entity ID in the `entities` reducer.\n\n### `optimisticUpdate` functions\n\n`optimisticUpdate` functions are just like update functions except they only pass the `prevValue`:\n\n```javascript\n(prevValue: any) => any\n```\n\n### `connectRequest`\n\nUse the `connectRequest` higher-order component to declare network dependencies for a React component. `connectRequest` takes a function that transforms the component `props` to a request query config or an array of request query configs. Example usage:\n\n```javascript\nimport { connectRequest } from 'redux-query';\nimport { connect } from 'react-redux';\n\nclass Dashboard extends Component {\n    ...\n}\n\nconst DashboardContainer = connectRequest((props) => ({\n    url: `/api/dashboard/${props.dashboardId}`,\n    update: {\n        chartsById: (prevCharts, dashboardCharts) => ({\n            ...prevCharts,\n            ...dashboardCharts,\n        }),\n        dashboardsById: (prevDashboards, dashboards) => ({\n            ...prevDashboards,\n            ...dashboards,\n        }),\n    },\n}))(Dashboard);\n\nconst mapStateToProps = (state, props) => {\n    return {\n        dashboard: getDashboard(state, props),\n    };\n};\n\nexport default connect(mapStateToProps)(DashboardContainer);\n```\n\n`connectRequest` passes an extra prop to the child component: `forceRequest`. Calling this function will cause the request(s) to be made again. This may be useful for polling or creating an interface to trigger refreshes.\n\n### `mutateAsync`\n\nDispatch `mutateAsync` Redux actions to trigger mutations. `mutateAsync` takes a mutation query config as its only argument. Example usage with a [react-redux](https://github.com/reactjs/react-redux)-connected component:\n\n```javascript\n// src/queries/dashboard.js\n\nexport const createUpdateDashboardQuery = (dashboardId, newName) => ({\n    url: `/api/${dashboardId}/update`,\n    body: {\n        name: newName,\n    },\n    update: {\n        dashboardsById: (prevDashboardsById, newDashboardsById) => ({\n            ...prevDashboardsById,\n            ...newDashboardsById,\n        }),\n    },\n});\n\n// src/actions/dashboard.js\n\nimport { mutateAsync } from 'redux-query';\nimport { createUpdateDashboardQuery } from '../queries/dashboard';\n\nexport const updateDashboard = (dashboardId, newName) => {\n    return mutateAsync(createUpdateDashboardQuery(dashboardId, newName));\n};\n\n// src/selectors/dashboard.js\n\nexport const getDashboard = (state, { dashboardId }) => {\n    if (state.entities.dashboardsById) {\n        return state.entities.dashboardsById[dashboardId];\n    } else {\n        return null;\n    }\n};\n\n// src/components/Dashboard.jsx\n\nimport { connect } from 'react-redux';\n\nimport { updateDashboard } from '../actions/dashboard';\nimport { getDashboard } from '../selectors/dashboard';\n\nclass Dashboard extends Component {\n    ...\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        dashboard: getDashboard(state, props),\n    };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        changeName: (newName) => {\n            dispatch(updateDashboard(props.dashboardId, newName));\n        },\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n```\n\nWhen dispatching a `mutateAsync` action, you can Promise-chain on the returned value from `dispatch`:\n\n```javascript\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        changeName: (newName) => {\n            dispatch(updateDashboard(props.dashboardId, newName)).then((result) => {\n                if (result.status !== 200) {\n                    dispatch(showUpdateDashboardFailedNotification(props.dashboardId));\n                }\n            });\n        },\n    };\n};\n```\n\nThe result of the promise returned by `mutateAsync` will be the following object:\n\n| Name | Type | Description |\n|:-----|:-----|:-----|\n| status | number | HTTP status code.\n| body | object or null | Parsed response body.\n| text | string | Unparsed response body string.\n| duration | number | The total duration from the start of the query to receiving the full response.\n| transformed | any | Result from the transform function. Will be identical to body if transform is unprovided in the query config.\n| entities | object | The new, updated entities that have been affected by the query.\n\n### `requestAsync`\n\nSimilarly to how mutations are triggered by dispatching `mutateAsync` actions, you can trigger requests by dispatching `requestAsync` actions with a request query config.\n\n### `redux-query/advanced` and custom network adapters\n\nBy default, `redux-query` makes XHR requests using the [superagent](https://github.com/visionmedia/superagent) library. If you'd rather use a different library for making requests, you can use the `redux-query`'s \"advanced\" mode by importing from `redux-query/advanced` instead of `redux-query`.\n\nNote: The default [`queryMiddleware`](./src/middleware/query.js) exported from the main `redux-query` entry point is simply a [superagent adapter](./src/adapters/superagent.js) bound to `queryMiddlewareAdvanced`.\n\nExample `queryMiddlewareAdvanced` usage:\n\n```javascript\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { entitiesReducer, queriesReducer, queryMiddlewareAdvanced } from 'redux-query/advanced';\n\n// A function that takes a url, method, and other options. This function should return an object\n// with two required properties: execute and abort.\nimport myNetworkAdapter from './network-adapter';\n\nexport const getQueries = (state) => state.queries;\nexport const getEntities = (state) => state.entities;\n\nconst reducer = combineReducers({\n    entities: entitiesReducer,\n    queries: queriesReducer,\n});\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(queryMiddlewareAdvanced(myNetworkAdapter)(getQueries, getEntities))\n);\n```\n\n#### Network adapters\n\nYou must provide a function to `queryMiddlewareAdvanced` that adheres to the following `NetworkAdapter` interface:\n\n```javascript\ntype NetworkAdapter = (\n    url: string,\n    method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE',\n    config?: { body?: string | Object, headers?: Object, credentials?: 'omit' | 'include' } = {},\n) => NetworkRequest;\n\ntype NetworkRequest = {\n    execute: (callback: (err: any, resStatus: number, resBody: ?Object, resText: string, resHeaders: Object) => void) => void,\n    abort: () => void,\n};\n```\n\n## Example\n\nA fork of the `redux` [Async](https://github.com/reactjs/redux/tree/master/examples/async) example is included. To run, first build the package:\n\n```sh\n$ npm install\n$ npm run build\n```\n\nThen you can run the example:\n\n```sh\n$ cd examples/async\n$ npm install\n$ npm run start\n```\n","created":"2017-03-27T17:26:12.352Z","modified":"2017-03-27T17:26:12.352Z","lastPublisher":{"name":"jnutter","email":"jnutter@gmail.com"},"owners":[{"name":"jnutter","email":"jnutter@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"redux-query-patch","_nodeVersion":"6.6.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/redux-query-patch-1.3.0.tgz_1490635571732_0.15246886969543993"},"_npmUser":{"name":"jnutter","email":"jnutter@gmail.com"},"_npmVersion":"3.10.3","_rev":"1-5a7468c2dbe03b3b780ac1516a6a7fd1","_shasum":"386957421aa624ea84a9731a63826ceab2006eca","author":{"name":"Ryan Ashcraft","email":"ryan@amplitude.com"},"bugs":{"url":"https://github.com/amplitude/redux-query/issues"},"directories":{},"dist-tags":{"latest":"1.3.0"},"dist":{"shasum":"386957421aa624ea84a9731a63826ceab2006eca","tarball":"https://registry.npmjs.org/redux-query-patch/-/redux-query-patch-1.3.0.tgz"},"maintainers":[{"name":"jnutter","email":"jnutter@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-27T17:26:12.352Z","created":"2017-03-27T17:26:12.352Z","1.3.0":"2017-03-27T17:26:12.352Z"}}}